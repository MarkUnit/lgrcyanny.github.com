<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | Cyanny's Live]]></title>
  <link href="http://lgrcyanny.github.com/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://lgrcyanny.github.com/"/>
  <updated>2012-10-15T21:23:24+08:00</updated>
  <id>http://lgrcyanny.github.com/</id>
  <author>
    <name><![CDATA[Cyanny]]></name>
    <email><![CDATA[lgrcyanny@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sieve Prime 素数筛法]]></title>
    <link href="http://lgrcyanny.github.com/blog/2012/10/15/sieve-prime/"/>
    <updated>2012-10-15T21:19:00+08:00</updated>
    <id>http://lgrcyanny.github.com/blog/2012/10/15/sieve-prime</id>
    <content type="html"><![CDATA[<h3>今天参加了一个笔试，又一次出现了素数的问题，再次把筛法重温一下吧，表示当时没有复习，裸考的，好像把素数的筛法写错了点，这次再加深一点咯</h3>

<hr />

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Heap Sort  (SievePrime.java)</span> <a href='/downloads/code/algorithm/SievePrime.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SievePrime</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>	<span class="kd">private</span> <span class="kt">int</span> <span class="n">upperBound</span><span class="o">;</span>
</span><span class='line'>	<span class="kd">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">isComposite</span><span class="o">;</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="nf">SievePrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span>
</span><span class='line'>	<span class="o">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span>
</span><span class='line'>		<span class="o">{</span>
</span><span class='line'>			<span class="k">this</span><span class="o">.</span><span class="na">upperBound</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
</span><span class='line'>			<span class="k">this</span><span class="o">.</span><span class="na">upperBound</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		<span class="k">this</span><span class="o">.</span><span class="na">isComposite</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">val</span><span class="o">];</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sieve</span><span class="o">()</span>
</span><span class='line'>	<span class="o">{</span>
</span><span class='line'>		<span class="n">isComposite</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>		<span class="n">isComposite</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>		<span class="n">isComposite</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span>  <span class="n">upperBound</span><span class="o">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>		<span class="o">{</span>
</span><span class='line'>			<span class="n">isComposite</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		<span class="kt">int</span> <span class="n">upperBoundSqrtRoot</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">upperBound</span> <span class="o">*</span> <span class="mf">1.0</span><span class="o">);</span>		
</span><span class='line'>		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">upperBoundSqrtRoot</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>		<span class="o">{</span>
</span><span class='line'>			<span class="k">if</span> <span class="o">(!</span><span class="n">isComposite</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>			<span class="o">{</span>
</span><span class='line'>				<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">upperBound</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>				<span class="o">{</span>
</span><span class='line'>					<span class="n">isComposite</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>				<span class="o">}</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>		<span class="o">}</span>
</span><span class='line'>		
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayPrimes</span><span class="o">()</span>
</span><span class='line'>	<span class="o">{</span>
</span><span class='line'>		
</span><span class='line'>		<span class="k">try</span>
</span><span class='line'>		<span class="o">{</span>
</span><span class='line'>			<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;primes.txt&quot;</span><span class="o">);</span>
</span><span class='line'>			<span class="n">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">)));</span>
</span><span class='line'>			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span>  <span class="n">isComposite</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>			<span class="o">{</span>
</span><span class='line'>				<span class="k">if</span> <span class="o">(!</span><span class="n">isComposite</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>				<span class="o">{</span>
</span><span class='line'>					<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>					<span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>				<span class="o">}</span>
</span><span class='line'>			<span class="o">}</span>
</span><span class='line'>			<span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>			<span class="n">pw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>		<span class="o">{</span>
</span><span class='line'>			<span class="c1">// TODO: handle exception</span>
</span><span class='line'>		<span class="o">}</span>		
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>	
</span><span class='line'>	<span class="cm">/**</span>
</span><span class='line'><span class="cm">	 * @param args</span>
</span><span class='line'><span class="cm">	 */</span>
</span><span class='line'>	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>	<span class="o">{</span>
</span><span class='line'>		<span class="n">SievePrime</span> <span class="n">sp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SievePrime</span><span class="o">(</span><span class="mi">2000000</span><span class="o">);</span>
</span><span class='line'>		<span class="n">sp</span><span class="o">.</span><span class="na">sieve</span><span class="o">();</span>
</span><span class='line'>		<span class="n">sp</span><span class="o">.</span><span class="na">displayPrimes</span><span class="o">();</span>
</span><span class='line'>	<span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
