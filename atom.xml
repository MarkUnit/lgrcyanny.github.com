<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cyanny's Live]]></title>
  <link href="http://lgrcyanny.github.com/atom.xml" rel="self"/>
  <link href="http://lgrcyanny.github.com/"/>
  <updated>2012-10-15T21:23:24+08:00</updated>
  <id>http://lgrcyanny.github.com/</id>
  <author>
    <name><![CDATA[Cyanny]]></name>
    <email><![CDATA[lgrcyanny@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sieve Prime 素数筛法]]></title>
    <link href="http://lgrcyanny.github.com/blog/2012/10/15/sieve-prime/"/>
    <updated>2012-10-15T21:19:00+08:00</updated>
    <id>http://lgrcyanny.github.com/blog/2012/10/15/sieve-prime</id>
    <content type="html"><![CDATA[<h3>今天参加了一个笔试，又一次出现了素数的问题，再次把筛法重温一下吧，表示当时没有复习，裸考的，好像把素数的筛法写错了点，这次再加深一点咯</h3>

<hr />

<!-- more -->




<figure class='code'><figcaption><span>Heap Sort  (SievePrime.java)</span> <a href='http://lgrcyanny.github.com/downloads/code/algorithm/SievePrime.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">test</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SievePrime</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">upperBound</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">isComposite</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">SievePrime</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">upperBound</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">upperBound</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">isComposite</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">val</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sieve</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">isComposite</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="n">isComposite</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="n">isComposite</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span>  <span class="n">upperBound</span><span class="o">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">isComposite</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">upperBoundSqrtRoot</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">upperBound</span> <span class="o">*</span> <span class="mf">1.0</span><span class="o">);</span>        
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">upperBoundSqrtRoot</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(!</span><span class="n">isComposite</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">upperBound</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">isComposite</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayPrimes</span><span class="o">()</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;primes.txt&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">PrintWriter</span> <span class="n">pw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">OutputStreamWriter</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">)));</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span>  <span class="n">isComposite</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(!</span><span class="n">isComposite</span><span class="o">[</span><span class="n">i</span><span class="o">])</span>
</span><span class='line'>              <span class="o">{</span>
</span><span class='line'>                  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">pw</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">pw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>          <span class="n">pw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO: handle exception</span>
</span><span class='line'>      <span class="o">}</span>        
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @param args</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">SievePrime</span> <span class="n">sp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SievePrime</span><span class="o">(</span><span class="mi">2000000</span><span class="o">);</span>
</span><span class='line'>      <span class="n">sp</span><span class="o">.</span><span class="na">sieve</span><span class="o">();</span>
</span><span class='line'>      <span class="n">sp</span><span class="o">.</span><span class="na">displayPrimes</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android.process.acore 意外停止解决办法]]></title>
    <link href="http://lgrcyanny.github.com/blog/2012/09/29/process-dot-android-dot-acore-has-stopped/"/>
    <updated>2012-09-29T21:42:00+08:00</updated>
    <id>http://lgrcyanny.github.com/blog/2012/09/29/process-dot-android-dot-acore-has-stopped</id>
    <content type="html"><![CDATA[<p>最近使用手机，刚刷的4.04，非常开心，但是这两天突然报错了，就是可恶的“android.process.acore has stopped”
一筹莫展中问了baidu,google,重新下了个刷机的CM9包，刷了，在豌豆荚下载软件，各种开心时，又报错了，然后恢复出厂设置，哎，又重来了，后来在baidu找到一个解决方法<br></p>

<h3>Gmail 通讯录引起的问题</h3>

<p>天知道，我用了QQ通信录，觉得很不错，然后从豌豆荚导入通信录，无奈总是会有重复数据，来自原来的gmail的通讯录，可能是这个原因引起android.process.acore has stopped，所以做了以下几件事： <br></p>

<br>


<blockquote>
<ul>
<li>重新恢复了出厂设置</li>
<li>到gmail中把通讯录全部删除，重新导入，并且去除重复，网上说去除重复很重要，不然还报错，目前运转良好。</li>
</ul>
</blockquote>


<p>带着狐疑的心态，开始使用了，但是之前还怀疑过是不是一些需要root权限的软件搞的，还须进一步尝试，正在不断摸索</p>

<h3>用了三四天了，那个异常也么有再出现，使用roottools没有问题。</h3>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTC Incredible S G11 RUU(G11 刷机4.0 简单的方法)]]></title>
    <link href="http://lgrcyanny.github.com/blog/2012/09/16/htc-incredible-s-g11-ruu/"/>
    <updated>2012-09-16T18:08:00+08:00</updated>
    <id>http://lgrcyanny.github.com/blog/2012/09/16/htc-incredible-s-g11-ruu</id>
    <content type="html"><![CDATA[<h2>探索刷机</h2>

<p>HTC Incredible S （G11） HBoot 2.0</p>

<hr />

<p>今天终于有点空开始刷机了，baidu，google了一大圈，找了很多教程，以为下个ROM刷进去就行了，发现要先刷Recovery，Recovery刷不成功，进入HBoot才发现手机没有S-OFF，开始了S-OFF的过程，还制作了金卡，后来发现http://revolutionary.io/只支持HBoot1.9和1.31， 带着悲剧的心情开始搜索了。。。</p>

<hr />

<h2>一个简单的方法让心里很不是滋味，犯二了啊。。。</h2>

<blockquote>
<ol>
<li>备份通讯录和短信等东东</li>
<li>下载官方ROM，网上很多的，我下了Dream_Rise_IS_CM9_0413.zip</li>
<li>下载一个**一键解锁**工具（网上到处都是），这个工具是官方的解锁方式，应该可靠</li>
<li>下载**刷机精灵**，采用HTC Sync 模式连接，选择需要的ROM开始刷机，在刷机精灵里面下载了**HTC G11 ICS 4.0.4 极速省电倾力制作 适合长久使用 参赛版.zip** 和 **HTC G11 Superior Sense4 V5.1-Full Sense4 毒蛇微调 三指手势快速设置.zip** 两个ROM， 都报错 *找不到Boot.img 1060* 最后还是自己下载的ROM刷成功了</li>
<li>如果顺利的话，用刷机精灵很快就可以刷好了</li>
</ol>
<strong>最后就很开心啦~~</strong>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heap sort（堆排序）]]></title>
    <link href="http://lgrcyanny.github.com/blog/2012/09/06/heap-sort/"/>
    <updated>2012-09-06T20:55:00+08:00</updated>
    <id>http://lgrcyanny.github.com/blog/2012/09/06/heap-sort</id>
    <content type="html"><![CDATA[<p>最近面试，考试之类的都在准备数据结构的东西，不断重复的写快排和堆排的代码，现在把这些东西都记录下来，有备无患咯
本文主要是堆排的算法。<br>
堆排序算法思想：<br></p>

<hr />

<ol>
<li>采用数组来表示堆<br></li>
<li>构建最大堆<br></li>
<li>将堆的第一个元素（最大的元素）和最后一个元素交换，然后从堆的第一个元素开始到倒数第二的元素，构建最大堆;   再交换第一个元素和倒数第二个元素，然后从堆的第一个元素到倒数第三个元素构建最大堆&#8230;以此类推，直到结束.</li>
</ol>


<!-- more -->


<hr />

<figure class='code'><figcaption><span>Heap Sort  (heapsort.java)</span> <a href='http://lgrcyanny.github.com/downloads/code/algorithm/heapsort.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Heap sort for an array</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeapSort</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">heapSort</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="c1">// Build a max heap</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">filterDown</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="c1">//Swap the last element with the first element,</span>
</span><span class='line'>      <span class="c1">//then bulid the max heap again</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">swap</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="n">filterDown</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Get the left child of i</span>
</span><span class='line'><span class="cm">  * @param i</span>
</span><span class='line'><span class="cm">  * @return</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">leftChild</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @param arr  The array to be heap sorted</span>
</span><span class='line'><span class="cm">  * @param i    The index which is the start to be filter down</span>
</span><span class='line'><span class="cm">  * @param n    The length</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">filterDown</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">tmp</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="n">leftChild</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">child</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">child</span> <span class="o">=</span> <span class="n">leftChild</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// the condition &quot;child != n - 1&quot; is important</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">child</span> <span class="o">!=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="o">[</span><span class="n">child</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">child</span> <span class="o">+</span> <span class="mi">1</span><span class="o">])</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">child</span><span class="o">++;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">tmp</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">child</span><span class="o">])</span>
</span><span class='line'>          <span class="o">{</span>
</span><span class='line'>              <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">child</span><span class="o">];</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">,</span><span class="kt">int</span> <span class="n">j</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>      <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>      <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">display</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span>
</span><span class='line'>      <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @param args</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span> <span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">16</span><span class="o">};</span>
</span><span class='line'>      <span class="n">heapSort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
</span><span class='line'>      <span class="n">display</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
